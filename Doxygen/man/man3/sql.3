.TH "sql" 3 "Fri Feb 3 2017" "Version Version: alpha v1.5" "Git Gud: The adventures of the hungover" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sql
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <sql\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsql\fP ()"
.br
.ti -1c
.RI "\fB~sql\fP ()"
.br
.ti -1c
.RI "std::vector< std::string > \fBget_data\fP (char *table, char *columnname)"
.br
.RI "Get data from a column in a table in the database\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_data\fP (char *table, char *columnname, char *condition1, char *condition2)"
.br
.RI "Get data from a column in a table in the database with condition\&. "
.ti -1c
.RI "void \fBchange_data\fP (char *table, char *condition1, char *condition2, char *columnname, char *new_value)"
.br
.RI "Change values in the database\&. "
.ti -1c
.RI "void \fBadd_data\fP (char *table, const char *values)"
.br
.RI "Add a new value to database\&. "
.ti -1c
.RI "void \fBexecute_query_without_return\fP (const char *to_be_executed)"
.br
.RI "Execute a query\&. "
.ti -1c
.RI "std::vector< std::string > \fBexecute_query_with_return\fP (const char *to_be_executed)"
.br
.RI "Execute a query\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_name_from_id_inventory\fP (std::string item_id)"
.br
.RI "Get the name from an item\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_sprite_inventory\fP (std::string item_id)"
.br
.RI "Get the sprite_path from an item\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_in_game_name_from_id_inventory\fP (std::string item_id)"
.br
.RI "Get the name from an item\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_inventory\fP ()"
.br
.RI "Get the inventory\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_player_value\fP (int save, std::string variable_name)"
.br
.RI "Get value of a column from the player\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_player_sprite\fP (int save)"
.br
.RI "Get sprite sheet of the player\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_player_value\fP (std::string npc_id)"
.br
.RI "Get value of the player\&. "
.ti -1c
.RI "void \fBadd_item_to_inventory\fP (std::string item_id)"
.br
.RI "Add an item to the players inventory\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_npc_value\fP (std::string npc_id)"
.br
.RI "Get all values from columns in NPC\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_number_of_npcs\fP ()"
.br
.RI "Get all id's of the NPC's\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_object_sprite_ids\fP ()"
.br
.RI "Get id's from objects and tiles sprites\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_object_sprite_value\fP (std::string object_id)"
.br
.RI "Get all values from columns in sprites\&. "
.ti -1c
.RI "void \fBset_new_map\fP (std::string map_name, int background_music)"
.br
.RI "Create new map\&. "
.ti -1c
.RI "void \fBsave_tiles\fP (std::string tile_path, int pos_x, int pos_y, std::string map_name)"
.br
.RI "Saves the tiles in the database\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_available_levels\fP ()"
.br
.RI "Get the names of all levels in the database\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_level_ids\fP ()"
.br
.RI "Get the ID's of all levels in the database\&. "
.ti -1c
.RI "std::map< std::string, std::vector< std::string > > \fBget_level_object_value\fP (std::string level_id)"
.br
.RI "Get all object values of a level\&. "
.ti -1c
.RI "sf::IntRect \fBget_collision_objects\fP (std::vector< std::string > objects)"
.br
.RI "Get the not walkable objects\&. "
.ti -1c
.RI "std::map< std::string, std::vector< std::string > > \fBget_level_background_value\fP (std::string level_id)"
.br
.RI "Get all background values of a level\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_music\fP (std::string map_id)"
.br
.RI "Get music of consisting map\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_quest_text\fP (std::string quest_id, std::string part)"
.br
.RI "Get quest part text\&. "
.ti -1c
.RI "std::vector< std::string > \fBget_quest_parts\fP (std::string quest_id)"
.br
.RI "Get all part numbers from quest\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static std::vector< std::string > \fBget_result\fP ()"
.br
.RI "Get saved result\&. "
.ti -1c
.RI "static void \fBset_result\fP (char *\fBx\fP)"
.br
.RI "Save result to static value\&. "
.ti -1c
.RI "static int \fBcallback\fP (void *NotUsed, int argc, char **argv, char **azColName)"
.br
.RI "Get value from database\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBcheck_query_request\fP ()"
.br
.RI "Checks if query is executed correctly\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "sqlite3 * \fBdatabase\fP"
.br
.ti -1c
.RI "std::string \fBdatabase_path\fP = '\&.\&./\&.\&./bin/database\&.db'"
.br
.ti -1c
.RI "int \fBrc\fP"
.br
.ti -1c
.RI "int \fBconnection\fP"
.br
.ti -1c
.RI "char * \fB_ERROR_MESSAGE\fP = 0"
.br
.ti -1c
.RI "const char * \fBdata\fP = 'Callback function called'"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 13 of file sql\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sql::sql ()"

.PP
Definition at line 6 of file sql\&.cpp\&.
.SS "sql::~sql ()"

.PP
Definition at line 24 of file sql\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void sql::add_data (char * table, const char * values)"

.PP
Add a new value to database\&. This method adds a new value in the given table of the database\&.
.br
The parameter 'value' is consists all the column values except the id,
.br
because the this value has auto increment\&.
.PP
.SS "Parameters: "
.PP
table : char* 
.br
-> Table name in the database
.PP
values : char* 
.br
-> column values to add in the database\&.
.PP
.SS "Example: "
.PP
add_data('sprites',''\&.\&./\&.\&./bin/objects/new_pic\&.png', new pic , 64 , 64')
.br
There is now a new record in the database with the given values\&. 
.PP
Definition at line 74 of file sql\&.cpp\&.
.SS "void sql::add_item_to_inventory (std::string item_id)"

.PP
Add an item to the players inventory\&. This function will give the player an item that will be stored in the inventory table in the database\&.
.br
.PP
.SS "Parameters: "
.PP
item_name : std::string -> The name of the item that has to be given
.PP
.SS "Example: "
.PP
add_item_to_inventory('1'); -> Adds a banana to the users inventory 
.PP
Definition at line 83 of file sql\&.cpp\&.
.SS "int sql::callback (void * NotUsed, int argc, char ** argv, char ** azColName)\fC [static]\fP"

.PP
Get value from database\&. This method is used to get the value from the database\&. What the function does is explained in the sqlite3\&.hpp file\&. In this class we use it to store the found data in a global static value\&. 
.PP
Definition at line 29 of file sql\&.cpp\&.
.SS "void sql::change_data (char * table, char * condition1, char * condition2, char * columnname, char * new_value)"

.PP
Change values in the database\&. This method overwrites data in the database, where the value of the given column meets the condition values\&.
.PP
.SS "Parameters: "
.PP
table : char* 
.br
-> Table name in the database
.PP
condition1 : char* 
.br
-> First condition of the Where statement in the SQL query\&.
.PP
condition2 : char* 
.br
-> Second condition of the Where statement in the SQL query\&.
.PP
columnname : char* 
.br
-> Column name in the database
.PP
new_value : char* 
.br
-> New value to be set in the specified column value
.PP
.SS "Example: "
.PP
change_data('player','id','1','name','pieter')
.br
The name of the player is now 'pieter' instead of 'arno' 
.PP
Definition at line 93 of file sql\&.cpp\&.
.SS "void sql::check_query_request ()\fC [private]\fP"

.PP
Checks if query is executed correctly\&. This method checks if the executed query is correctly procesed\&.
.br
If that is not the case this function will print an error on the command prompt\&.
.br
.PP
.SS "Example: "
.PP
\fBcheck_query_request()\fP
.br
\fIno error, so do nothing\fP 
.PP
Definition at line 36 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::execute_query_with_return (const char * to_be_executed)"

.PP
Execute a query\&. This method executes a given query that has a return value\&.
.br
 
.SS "Parameters: "
.PP
to_be_executed : const char* 
.br
-> Query to be executed
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
execute_query_with_return('SELECT name FROM player WHERE id == 1;')
.br
Return: {'arno'} 
.PP
Definition at line 48 of file sql\&.cpp\&.
.SS "void sql::execute_query_without_return (const char * to_be_executed)"

.PP
Execute a query\&. This method executes a given query that has no return value\&.
.br
 
.SS "Parameters: "
.PP
to_be_executed : const char* 
.br
-> Query to be executed
.PP
.SS "Example: "
.PP
execute_query_without_return('INSERT INTO sprites VALUES(NULL, '\&.\&./\&.\&./bin/objects/new_pic\&.png', new pic , 64 , 64);')
.br
There is now a new record in the database with the given values\&. 
.PP
Definition at line 43 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_available_levels ()"

.PP
Get the names of all levels in the database\&. This method returns all names of the levels that are in the database\&.
.br
This can be usefull so you can know if a level already exists\&. 
.br
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
\fBget_available_levels()\fP
.br
-> {'level1','level2','level5'} 
.PP
Definition at line 389 of file sql\&.cpp\&.
.SS "sf::IntRect sql::get_collision_objects (std::vector< std::string > objects)"

.PP
Get the not walkable objects\&. This method returns the hitbox of an object that is not walkable\&.
.br
The hitbox can be used to calculate the collision detection on\&. 
.br
 
.SS "Parameters: "
.PP
objects : std::vector<std::string> 
.br
-> values of one opbject\&.
.PP
.SS "Return: "
.PP
collision_rects : sf::IntRect 
.br
-> Hitbox of the not walkable object\&.
.br
.PP
.SS "Example: "
.PP
get_collision_objects({\&.\&.\&.}) 
.br
-> (100,100,50,50) 
.PP
Definition at line 502 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_data (char * table, char * columnname)"

.PP
Get data from a column in a table in the database\&. This method gets the data from a column in a table in the database\&.
.br
 
.SS "Parameters: "
.PP
table : char* 
.br
-> Table name in the database
.PP
column : char* 
.br
-> Column name in the database
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
Get_data('player', 'level') 
.br
return: {'1'}\&. 
.PP
Definition at line 66 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_data (char * table, char * columnname, char * condition1, char * condition2)"

.PP
Get data from a column in a table in the database with condition\&. This method gets the data from a table in the database,
.br
where the value of the given column meets the condition values\&.
.PP
.SS "Parameters: "
.PP
table : char* 
.br
-> Table name in the database
.PP
column : char* 
.br
-> Column name in the database
.PP
condition1 : char* 
.br
-> First condition of the Where statement in the SQL query\&.
.PP
condition2 : char* 
.br
-> Second condition of the Where statement in the SQL query\&.
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
Get_data('player', 'name','id','1') 
.br
return: {'arno'}\&. 
.PP
Definition at line 57 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_in_game_name_from_id_inventory (std::string item_id)"

.PP
Get the name from an item\&. This function returns the name of an item by using its ID\&.
.br
 
.SS "Parameters: "
.PP
item_id : std::string 
.br
-> The ID of the item\&.
.PP
.SS "Return: "
.PP
name : std::vector<std::string> 
.br
-> The in game name of the requested item\&.
.PP
.SS "Example: "
.PP
get_name_from_id_inventory('1') 
.br
-> Tokato Gloves 
.PP
Definition at line 144 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_inventory ()"

.PP
Get the inventory\&. This function retrieves the inventory and its values and puts it into a vector\&. 
.br
.PP
.SS "Return: "
.PP
inventory_vector : std::vector<std::string> 
.br
-> This vector contains the items in the inventory
.PP
.SS "Example: "
.PP
\fBget_inventory()\fP 
.br
-> {'1', '2', '2', '3'} 
.PP
Definition at line 114 of file sql\&.cpp\&.
.SS "std::map< std::string, std::vector< std::string > > sql::get_level_background_value (std::string level_id)"

.PP
Get all background values of a level\&. This method returns the values of all background tiles that are assigned to the given level ID\&.
.br
.PP
.SS "Parameters: "
.PP
level_id : std::string 
.br
-> id of the level from what the background tiles have to be loaded\&.
.PP
.SS "Return: "
.PP
list_of_data : std::map< std::string, std::vector<std::string> > 
.br
-> Map that contains the asked data in the form of strings with name as key\&.
.br
.PP
.SS "Example: "
.PP
get_level_object_value('level1') 
.br
{'road1':{'\&.\&./\&.\&./bin/tiles/example\&.png','120','150','1'}} 
.PP
Definition at line 452 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_level_ids ()"

.PP
Get the ID's of all levels in the database\&. This method returns all ID's of the levels that are in the database\&.
.br
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
\fBget_level_ids()\fP
.br
-> {'1','2','5'} 
.PP
Definition at line 394 of file sql\&.cpp\&.
.SS "std::map< std::string, std::vector< std::string > > sql::get_level_object_value (std::string level_id)"

.PP
Get all object values of a level\&. This method returns the values of all objects that are assigned to the given level ID\&.
.br
.PP
.SS "Parameters: "
.PP
level_id : std::string 
.br
-> id of the level from what the objects have to be loaded\&.
.PP
.SS "Return: "
.PP
list_of_data : std::map<std::string, std::vector<std::string>> 
.br
-> map that contains the asked data in the form of strings with name as key\&.
.br
.PP
.SS "Example: "
.PP
get_level_object_value('level1') 
.br
-> {'road1':{'\&.\&./\&.\&./bin/objects/example\&.png','120','150','1'}} 
.PP
Definition at line 401 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_music (std::string map_id)"

.PP
Get music of consisting map\&. This method returns the path of a music file what is the background music of a level\&. 
.br
The values are searched by the ID of the map\&. 
.br
.PP
.SS "Parameters: "
.PP
map_id : std::string 
.br
-> ID of the level where the music file is requested\&.
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> list that contains the asked data in the form of strings\&.
.br
.PP
.SS "Example: "
.PP
get_music('17') 
.br
-> \&.\&./\&.\&./bin/music/x_gon_give_it_to_ya\&.wav 
.PP
Definition at line 591 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_name_from_id_inventory (std::string item_id)"

.PP
Get the name from an item\&. This function returns the name of an item by using its ID\&.
.br
.PP
.SS "Parameters: "
.PP
item_id : std::string 
.br
-> The ID of the item\&. 
.br
.PP
.SS "Return: "
.PP
name : std::vector<std::string> 
.br
-> The name of the requested item\&.
.PP
.SS "Example: "
.PP
get_name_from_id_inventory('1') 
.br
-> tokato_gloves 
.PP
Definition at line 124 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_npc_value (std::string npc_id)"

.PP
Get all values from columns in NPC\&. This method returns all column values of a NPC\&.
.br
 The order of the returning values in the vector is:
.br
 index | name of value 
.br
------------------------- 
.br
 0 | name 
.br
 1 | level 
.br
 2 | class_id 
.br
 3 | sprite_id 
.br
 4 | position_x 
.br
 5 | position_y 
.br
 6 | quest_id 
.br
.PP
.SS "Parameters: "
.PP
npc_id : std::string 
.br
-> ID of the NPC from whom the values are asked\&.
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
get_npc_value('1')
.br
-> {'arno'} 
.PP
Definition at line 183 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_number_of_npcs ()"

.PP
Get all id's of the NPC's\&. This method returns all id values of the NPC table\&.
.br
The lengths of the vector is equal to how many NPC's there are in the table\&.
.br
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
\fBget_number_of_npcs()\fP
.br
-> {'1','2','5'} 
.PP
Definition at line 178 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_object_sprite_ids ()"

.PP
Get id's from objects and tiles sprites\&. This method returns all sprite id values of tiles and objects\&.
.br
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
\fBget_object_sprite_ids()\fP
.br
-> {'1','2','5'} 
.PP
Definition at line 226 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_object_sprite_value (std::string object_id)"

.PP
Get all values from columns in sprites\&. This method returns all column values of a a sprite\&.
.br
The order of the returning values in the vector is:
.br
 index | name of value 
.br
------------------------- 
.br
 0 | path 
.br
 1 | name 
.br
 2 | sprite_size_x 
.br
 3 | sprite_size_y 
.br
.PP
.SS "Parameters: "
.PP
object_id : std::string 
.br
-> ID of the object/tile from what the values are asked\&.
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
get_object_sprite_value('1') 
.br
-> {'\&.\&./\&.\&./bin/objects/road1\&.png', 'road1','32','32'} 
.PP
Definition at line 239 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_player_sprite (int save)"

.PP
Get sprite sheet of the player\&. This method returns the sprite sheet of the player\&.
.br
The save is equal the the player id in the database,
.br
this is because the player can have multiple saved games\&.
.br
.PP
.SS "Parameters: "
.PP
save : int 
.br
-> Save of the player and player id in the database\&.
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
get_player_sprite(1)
.br
-> {'\&.\&./\&.\&./bin/sprite_sheets/player_sprite\&.png'} 
.PP
Definition at line 166 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_player_value (int save, std::string variable_name)"

.PP
Get value of a column from the player\&. This method returns a column value of the player\&.
.br
The save is equal the the player id in the database,
.br
this is because the player can have multiple saved games\&.
.br
 
.SS "Parameters: "
.PP
save : int 
.br
-> Save of the player and player id in the database\&.
.PP
variable_name : std::string 
.br
-> Columnname from what the value is requested\&.
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
get_player_value(1,'name')
.br
-> {'arno'} 
.PP
Definition at line 155 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_player_value (std::string npc_id)"

.PP
Get value of the player\&. This method returns the value of a player\&.
.br
The player value is calculated on the player_id\&.
.br
.PP
.SS "Parameters: "
.PP
npc_id : std::string 
.br
-> Save of the player and player id in the database\&.
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
get_player_sprite(1)
.br
-> {'\&.\&./\&.\&./bin/sprite_sheets/player_sprite\&.png'} 
.PP
Definition at line 542 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_quest_parts (std::string quest_id)"

.PP
Get all part numbers from quest\&. This method returns the numbers of quest parts of a quest\&. 
.br
The values are searched by the ID of the quest\&. 
.br
.PP
.SS "Parameters: "
.PP
quest_id : std::string 
.br
-> ID of the quest from what the text is requested\&.
.br
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> list that contains the asked data in the form of strings\&.
.br
.PP
.SS "Example: "
.PP
get_quest_parts('1') 
.br
-> {'1','3','4','5','6'} 
.PP
Definition at line 636 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_quest_text (std::string quest_id, std::string part)"

.PP
Get quest part text\&. This method returns the text of a quest part\&. 
.br
The values are searched by the ID of the of the quest and the given part number\&. 
.br
.PP
.SS "Parameters: "
.PP
quest_id : std::string 
.br
-> ID of the quest from what the text is requested\&.
.br
 part : std::string 
.br
-> number of the part in the quest where the text is requested from\&. 
.br
.PP
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> list that contains the asked data in the form of strings\&.
.br
.PP
.SS "Example: "
.PP
get_quest_text('17') 
.br
-> {'Hello\&.','welcome'} 
.PP
Definition at line 607 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_result ()\fC [static]\fP"

.PP
Get saved result\&. This method returns the result that is stored in the global result value\&.
.br
the result value is a global and static because it is set by the callback function\&.
.br
 
.SS "Return: "
.PP
list_of_data : std::vector<std::string> 
.br
-> List that contains the asked data in the form of strings\&.
.PP
.SS "Example: "
.PP
\fBget_result()\fP
.br
Return: {'arno'} 
.PP
Definition at line 103 of file sql\&.cpp\&.
.SS "std::vector< std::string > sql::get_sprite_inventory (std::string item_id)"

.PP
Get the sprite_path from an item\&. This function returns the name of an item by using its ID\&.
.br
 
.SS "Parameters: "
.PP
sprite_path : std::string 
.br
-> The ID of the item\&.
.PP
.SS "Return: "
.PP
sprite_path : std::vector<std::string> 
.br
-> The sprite_path of the requested item\&.
.PP
.SS "Example: "
.PP
get_sprite_inventory('1') 
.br
-> '\&.\&./\&.\&./bin/objects/banana\&.gif' 
.PP
Definition at line 134 of file sql\&.cpp\&.
.SS "void sql::save_tiles (std::string tile_path, int pos_x, int pos_y, std::string map_name)"

.PP
Saves the tiles in the database\&. This method saves a tile in the database\&.
.br
The tile values will be filterd if it is an object or an background tile\&.
.br
It is very importend that if you want to save the level, that the map_name is spelled correctly\&.
.br
If the map_name is not correctly spelled or if it doesn't exist, the level cannot be saved\&. 
.br
The same counts for the tile path\&. 
.br
.PP
.SS "Parameters: "
.PP
tile_path : std::string 
.br
-> path to the consisting image of the object/tile\&.
.PP
pos_x : int 
.br
-> x position where the object/tile should be placed in the map\&.
.PP
pos_y : int 
.br
-> y position where the object/tile should be placed in the map\&.
.PP
map_name : std::string 
.br
-> name of the map where the object/tile will be placed in\&.
.PP
.SS "Example: "
.PP
save_tiles('\&.\&./\&.\&./bin/objects/example\&.png',10,10,'level1')
.br
This object is now saved in the objects table, 
.br
with a refference that is has to be placed in level1\&.
.br

.PP
Definition at line 293 of file sql\&.cpp\&.
.SS "void sql::set_new_map (std::string map_name, int background_music)"

.PP
Create new map\&. This method creates a new record in the maps table\&.
.br
This record consists the map_id, map name and the corresponding background music\&.
.br
.PP
.SS "Parameters: "
.PP
map_name : std::string 
.br
-> name of the level that has to be created\&.
.PP
background_music : int 
.br
-> id of the background music of the level\&.
.PP
.SS "Example: "
.PP
set_new_map('level1',1)
.br
There is now a new maps record in the database,
.br
that has the name level1 with brackground_id 1\&.
.br

.PP
Definition at line 279 of file sql\&.cpp\&.
.SS "static void sql::set_result (char * x)\fC [inline]\fP, \fC [static]\fP"

.PP
Save result to static value\&. This method adds a new value, what is a result of an query,
.br
to the static string vector result\&.
.br
It does not overwrite it because there could be a result of multiple strings\&.
.br
This function is only called by the static callback function\&.
.br
 
.SS "Parameters: "
.PP
x : char* 
.br
-> Query result to add\&.
.PP
.SS "Example: "
.PP
set_result('arno')
.br
Last value in result is now 'arno'\&. 
.PP
Definition at line 321 of file sql\&.hpp\&.
.SH "Member Data Documentation"
.PP 
.SS "char* sql::_ERROR_MESSAGE = 0\fC [private]\fP"

.PP
Definition at line 21 of file sql\&.hpp\&.
.SS "int sql::connection\fC [private]\fP"

.PP
Definition at line 19 of file sql\&.hpp\&.
.SS "const char* sql::data = 'Callback function called'\fC [private]\fP"

.PP
Definition at line 22 of file sql\&.hpp\&.
.SS "sqlite3* sql::database\fC [private]\fP"

.PP
Definition at line 15 of file sql\&.hpp\&.
.SS "std::string sql::database_path = '\&.\&./\&.\&./bin/database\&.db'\fC [private]\fP"

.PP
Definition at line 16 of file sql\&.hpp\&.
.SS "int sql::rc\fC [private]\fP"

.PP
Definition at line 18 of file sql\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Git Gud: The adventures of the hungover from the source code\&.
