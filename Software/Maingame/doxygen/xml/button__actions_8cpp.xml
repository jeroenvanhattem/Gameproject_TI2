<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="button__actions_8cpp" kind="file" language="C++">
    <compoundname>button_actions.cpp</compoundname>
    <includes refid="button__actions_8hpp" local="yes">button_actions.hpp</includes>
    <incdepgraph>
      <node id="17">
        <label>D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp</label>
        <link refid="button__actions_8cpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>SFML\Graphics.hpp</label>
      </node>
      <node id="18">
        <label>button_actions.hpp</label>
        <link refid="button__actions_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="button__actions_8cpp_1a94ef0400a00795316cd4e374db2af104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sf::Vector2f</type>
        <definition>sf::Vector2f Vector2f_from_Vector2i</definition>
        <argsstring>(sf::Vector2i vector)</argsstring>
        <name>Vector2f_from_Vector2i</name>
        <param>
          <type>sf::Vector2i</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Convert a sf::vector2i to sf::Vector2f. </para>        </briefdescription>
        <detaileddescription>
<para>This method will convert a sf::Vector2i (a vector consisting 2 integer values), <linebreak/>
to a sf::Vector2f (a vector consisting 2 float values). <linebreak/>
</para><para><heading level="2">Parameters: </heading>
</para><para>vector : sf::Vector2f <linebreak/>
-&gt; Position to be converted.</para><para><heading level="2">Return: </heading>
</para><para>Converted sf::Vector2i : sf::Vector2f <linebreak/>
-&gt; Converted vector2i.</para><para><heading level="2">Example: </heading>
</para><para>Vector2f_from_Vector2i({100 : int, 100 : int}) <linebreak/>
-&gt; {100 : float, 100 : float} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" line="6" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" bodystart="6" bodyend="8"/>
        <referencedby refid="button__actions_8hpp_1a067f53aa6474ce70abccc5bbd28ad01d" compoundref="button__actions_8cpp" startline="46" endline="48">get_mouse_position</referencedby>
      </memberdef>
      <memberdef kind="function" id="button__actions_8cpp_1a6a2c7019e201b42b13d3032fc538298d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sf::Vector2f</type>
        <definition>sf::Vector2f get_move_direction_from_button_keys</definition>
        <argsstring>()</argsstring>
        <name>get_move_direction_from_button_keys</name>
        <briefdescription>
<para>Get the move direction if move button is pressed. </para>        </briefdescription>
        <detaileddescription>
<para>This method will check if one of the buttons in the defined struct of move action buttons is pressed. <linebreak/>
if that is the case, the method will return the move direction of the consisting move. <linebreak/>
</para><para><heading level="2">Return: </heading>
</para><para>direction : sf::Vector2f <linebreak/>
-&gt; Direction in which the player should move.<linebreak/>
</para><para><heading level="2">Example: </heading>
</para><para>get_move_direction_from_button_keys <linebreak/>
-&gt; {-1, 0} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" line="11" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" bodystart="11" bodyend="23"/>
        <references refid="button__actions_8hpp_1a482463c81347dda7bee1190e25bdb0a1">actions</references>
        <referencedby refid="classgame_1a2b80a1fbc6d723e78d3c86d2f8ff24d4" compoundref="game_8cpp" startline="52" endline="96">game::game_loop</referencedby>
        <referencedby refid="classgame_1a0eb06f984d04128ba7fba6fcca04bda3" compoundref="game_8cpp" startline="236" endline="248">game::get_items_from_database</referencedby>
      </memberdef>
      <memberdef kind="function" id="button__actions_8cpp_1aac3d825fa7b0f54fd0340a611b9639d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string get_skill_from_button_keys</definition>
        <argsstring>()</argsstring>
        <name>get_skill_from_button_keys</name>
        <briefdescription>
<para>Check if skill button is pressed. </para>        </briefdescription>
        <detaileddescription>
<para>This method will check if one of the buttons in the defined struct of skill_buttons is pressed. <linebreak/>
if that is the case, the method will return the name of the consisting skill. <linebreak/>
</para><para><heading level="2">Return: </heading>
</para><para>skill_name : std::string <linebreak/>
-&gt; name of the skill button that is pressed.</para><para><heading level="2">Example: </heading>
</para><para><ref refid="button__actions_8hpp_1aac3d825fa7b0f54fd0340a611b9639d5" kindref="member">get_skill_from_button_keys()</ref> <linebreak/>
-&gt; &quot;shoot_arrow&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" line="25" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" bodystart="25" bodyend="33"/>
        <references refid="button__actions_8hpp_1aa3b9a687b77321bb0bf1bba117df6d51">skills</references>
        <referencedby refid="classgame_1a0eb06f984d04128ba7fba6fcca04bda3" compoundref="game_8cpp" startline="236" endline="248">game::get_items_from_database</referencedby>
      </memberdef>
      <memberdef kind="function" id="button__actions_8cpp_1a147658cb884fa19f4a0a255ea858b7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string get_action_name_from_button_keys</definition>
        <argsstring>()</argsstring>
        <name>get_action_name_from_button_keys</name>
        <briefdescription>
<para>Get the name of a move if move button is pressed. </para>        </briefdescription>
        <detaileddescription>
<para>This method will return the name from a move if one of the buttons, <linebreak/>
in the defined struct of move action buttons, is pressed. <linebreak/>
</para><para><heading level="2">Return: </heading>
</para><para>direction : sf::Vector2f <linebreak/>
-&gt; Direction in which the player should move.<linebreak/>
</para><para><heading level="2">Example: </heading>
</para><para><ref refid="button__actions_8hpp_1a147658cb884fa19f4a0a255ea858b7b8" kindref="member">get_action_name_from_button_keys()</ref> <linebreak/>
-&gt; &quot;walk_up&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" line="35" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" bodystart="35" bodyend="43"/>
        <references refid="button__actions_8hpp_1a9b45b3e13bd9167aab02e17e08916231" compoundref="button__actions_8hpp" startline="7">name</references>
        <references refid="button__actions_8hpp_1a482463c81347dda7bee1190e25bdb0a1">actions</references>
        <referencedby refid="classgame_1a0eb06f984d04128ba7fba6fcca04bda3" compoundref="game_8cpp" startline="236" endline="248">game::get_items_from_database</referencedby>
      </memberdef>
      <memberdef kind="function" id="button__actions_8cpp_1a067f53aa6474ce70abccc5bbd28ad01d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sf::Vector2f</type>
        <definition>sf::Vector2f get_mouse_position</definition>
        <argsstring>(sf::RenderWindow &amp;window)</argsstring>
        <name>get_mouse_position</name>
        <param>
          <type>sf::RenderWindow &amp;</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Get the position of the mouse. </para>        </briefdescription>
        <detaileddescription>
<para>This method will return the position of the mouse on the window. <linebreak/>
</para><para><heading level="2">Parameters: </heading>
</para><para>window : sf::RenderWindow&amp; -&gt; window to check the mouse on.</para><para><heading level="2">Return: </heading>
</para><para>mouse position : sf::Vector2f <linebreak/>
-&gt; Direction in which the player should move.<linebreak/>
</para><para><heading level="2">Example: </heading>
</para><para>get_mouse_position( window) <linebreak/>
-&gt; {100, 100} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" line="46" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" bodystart="46" bodyend="48"/>
        <references refid="button__actions_8cpp_1a94ef0400a00795316cd4e374db2af104" compoundref="button__actions_8cpp" startline="6" endline="8">Vector2f_from_Vector2i</references>
        <referencedby refid="classgame_1a2b80a1fbc6d723e78d3c86d2f8ff24d4" compoundref="game_8cpp" startline="52" endline="96">game::game_loop</referencedby>
      </memberdef>
      <memberdef kind="function" id="button__actions_8cpp_1a66f5c6d1b29c823603568294cf3702ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool check_mouse</definition>
        <argsstring>()</argsstring>
        <name>check_mouse</name>
        <briefdescription>
<para>Check if left mouse button is pressed. </para>        </briefdescription>
        <detaileddescription>
<para>This method will check if the left mouse button is pressed. <linebreak/>
If that is the case the function will return true. <linebreak/>
</para><para><heading level="2">Return: </heading>
</para><para>button_pressed : bool <linebreak/>
-&gt; If the mousebutton is pressed.</para><para><heading level="2">Example: </heading>
</para><para><ref refid="button__actions_8hpp_1a66f5c6d1b29c823603568294cf3702ea" kindref="member">check_mouse()</ref> <linebreak/>
-&gt; true </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" line="50" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="button__actions_8hpp" kindref="compound">button_actions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="button__actions_8hpp_1a94ef0400a00795316cd4e374db2af104" refkind="member"><highlight class="normal">sf::Vector2f<sp/><ref refid="button__actions_8cpp_1a94ef0400a00795316cd4e374db2af104" kindref="member">Vector2f_from_Vector2i</ref>(sf::Vector2i<sp/>vector){</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sf::Vector2f(static_cast&lt;float&gt;(vector.x),<sp/>static_cast&lt;float&gt;(vector.y));</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="button__actions_8hpp_1a6a2c7019e201b42b13d3032fc538298d" refkind="member"><highlight class="normal">sf::Vector2f<sp/><ref refid="button__actions_8cpp_1a6a2c7019e201b42b13d3032fc538298d" kindref="member">get_move_direction_from_button_keys</ref>()<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>move_direction<sp/>=<sp/>{0,0};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classaction" kindref="compound">action</ref><sp/>:<sp/><ref refid="button__actions_8hpp_1a482463c81347dda7bee1190e25bdb0a1" kindref="member">actions</ref>)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf::Keyboard::isKeyPressed(<ref refid="classaction" kindref="compound">action</ref>.Key))<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>move_direction<sp/>=<sp/>sf::Vector2f{<sp/><ref refid="classaction" kindref="compound">action</ref>.x,<sp/><ref refid="classaction" kindref="compound">action</ref>.y<sp/>};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf::Keyboard::isKeyPressed(sf::Keyboard::LShift))<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>move_direction<sp/>=<sp/>{move_direction.x*2,<sp/>move_direction.y<sp/>*<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>move_direction;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="button__actions_8hpp_1aac3d825fa7b0f54fd0340a611b9639d5" refkind="member"><highlight class="normal">std::string<sp/><ref refid="button__actions_8cpp_1aac3d825fa7b0f54fd0340a611b9639d5" kindref="member">get_skill_from_button_keys</ref>()<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>temp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>skill<sp/>:<sp/><ref refid="button__actions_8hpp_1aa3b9a687b77321bb0bf1bba117df6d51" kindref="member">skills</ref>)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf::Keyboard::isKeyPressed(skill.Key)<sp/>||<sp/>sf::Mouse::isButtonPressed(skill.mouse_key))<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>skill.name;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="button__actions_8hpp_1a147658cb884fa19f4a0a255ea858b7b8" refkind="member"><highlight class="normal">std::string<sp/><ref refid="button__actions_8cpp_1a147658cb884fa19f4a0a255ea858b7b8" kindref="member">get_action_name_from_button_keys</ref>()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="button__actions_8hpp_1a9b45b3e13bd9167aab02e17e08916231" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classaction" kindref="compound">action</ref><sp/>:<sp/><ref refid="button__actions_8hpp_1a482463c81347dda7bee1190e25bdb0a1" kindref="member">actions</ref>)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf::Keyboard::isKeyPressed(<ref refid="classaction" kindref="compound">action</ref>.Key))<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="classaction" kindref="compound">action</ref>.name;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="button__actions_8hpp_1a9b45b3e13bd9167aab02e17e08916231" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="button__actions_8hpp_1a067f53aa6474ce70abccc5bbd28ad01d" refkind="member"><highlight class="normal">sf::Vector2f<sp/><ref refid="button__actions_8cpp_1a067f53aa6474ce70abccc5bbd28ad01d" kindref="member">get_mouse_position</ref>(sf::RenderWindow<sp/>&amp;<sp/>window)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="button__actions_8cpp_1a94ef0400a00795316cd4e374db2af104" kindref="member">Vector2f_from_Vector2i</ref>(sf::Mouse::getPosition(window));</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="button__actions_8hpp_1a66f5c6d1b29c823603568294cf3702ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="button__actions_8cpp_1a66f5c6d1b29c823603568294cf3702ea" kindref="member">check_mouse</ref>()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sf::Mouse::isButtonPressed(sf::Mouse::Left);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/button_actions.cpp"/>
  </compounddef>
</doxygen>
