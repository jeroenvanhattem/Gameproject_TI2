<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classability" kind="class" language="C++" prot="public">
    <compoundname>ability</compoundname>
    <includes refid="ability_8hpp" local="no">ability.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classability_1a0064d2793f684924720a08b059ec2ee0" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string ability::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="8" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classability_1aaccb2020f374c640eddfce7f1a669821" prot="private" static="no" mutable="no">
        <type>std::vector&lt; sf::Sprite &gt;</type>
        <definition>std::vector&lt;sf::Sprite&gt; ability::action</definition>
        <argsstring></argsstring>
        <name>action</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="9" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classability_1a36d5b1ac8a8a2df0f1790f3ddf320fad" prot="private" static="no" mutable="no">
        <type>sf::Vector2f</type>
        <definition>sf::Vector2f ability::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="10" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classability_1a5dbf426e4716c3cc09a8ec0dafb148a0" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int ability::current_action_step</definition>
        <argsstring></argsstring>
        <name>current_action_step</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="11" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classability_1a467a2d8bf397119e9856d1cf8d2c58bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ability::ability</definition>
        <argsstring>(std::string name, std::vector&lt; sf::Sprite &gt; &amp;action, sf::Vector2f position)</argsstring>
        <name>ability</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::vector&lt; sf::Sprite &gt; &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>sf::Vector2f</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This method will crate an object of class ability.<linebreak/>
</para><para><heading level="2">Parameters: </heading>
</para><para>name : std::string <linebreak/>
-&gt; name of the ability to be loaded.</para><para>action : std::vector&lt;sf::Sprite&gt; <linebreak/>
-&gt; list of sprites that the animation of the ability needs.<linebreak/>
 position : sf::Vector2f <linebreak/>
-&gt; position of the player, so the ability is loaded on that spot.</para><para><heading level="2">Example: </heading>
</para><para>ability a(&quot;arno&quot;, {...}, {100,100})<linebreak/>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="37" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.cpp" bodystart="5" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classability_1a83c4b418a33a2a7f44c3883abfeac4fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ability::get_name</definition>
        <argsstring>()</argsstring>
        <name>get_name</name>
        <briefdescription>
<para>Get the name of the ability. </para>        </briefdescription>
        <detaileddescription>
<para>This method returns the name of the saved ability.<linebreak/>
</para><para><heading level="2">Return: </heading>
</para><para>name : std::String<linebreak/>
-&gt; name of the ability</para><para><heading level="2">Example: </heading>
</para><para><ref refid="classability_1a83c4b418a33a2a7f44c3883abfeac4fb" kindref="member">get_name()</ref><linebreak/>
&quot;walk_up&quot;<linebreak/>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="56" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.cpp" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classability_1ae34dc7ddb4b0fdb1b00e70ce1860456e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ability::move</definition>
        <argsstring>(sf::Vector2f new_position)</argsstring>
        <name>move</name>
        <param>
          <type>sf::Vector2f</type>
          <declname>new_position</declname>
        </param>
        <briefdescription>
<para>Move the current ability. </para>        </briefdescription>
        <detaileddescription>
<para>This method moves the position of the ability, <linebreak/>
so that the ability sprite is printed on the same position as the player or NPC.<linebreak/>
</para><para><heading level="2">Parameters: </heading>
</para><para>new_position : sf::Vector2f<linebreak/>
-&gt; new position of the ability sprite</para><para><heading level="2">Example: </heading>
</para><para>move({200,200})<linebreak/>
ability position now set on 200, 200<linebreak/>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="76" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.cpp" bodystart="19" bodyend="35"/>
        <references refid="classability_1aed378a7d8a69e8a50347bcc03c0cffb3" compoundref="ability_8cpp" startline="37" endline="45">next_step</references>
      </memberdef>
      <memberdef kind="function" id="classability_1a5cc662aeebc530c01b7bd5ed9328a54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void</type>
        <definition>const void ability::draw</definition>
        <argsstring>(sf::RenderWindow &amp;window)</argsstring>
        <name>draw</name>
        <param>
          <type>sf::RenderWindow &amp;</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Print ability. </para>        </briefdescription>
        <detaileddescription>
<para>This method draws the ability on the screen. <linebreak/>
Because there are likely multiple sprites in an ability, <linebreak/>
the sprite that have to be printed is handle by the current_action_step value. <linebreak/>
</para><para><heading level="2">Parameters: </heading>
</para><para>window : sf::RenderWindow<linebreak/>
-&gt; window where the ability have to be drawn on.<linebreak/>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="91" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classability_1a3c6429af67529f039161a35f70caca6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ability::add_sprite_to_action</definition>
        <argsstring>(sf::Sprite t)</argsstring>
        <name>add_sprite_to_action</name>
        <param>
          <type>sf::Sprite</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Add a sprite to the action. </para>        </briefdescription>
        <detaileddescription>
<para>This method will add a new sprite to the action. <linebreak/>
This method can be used if you think that the animation is not complete enough,<linebreak/>
and want to add an extra sprite to the animation.<linebreak/>
</para><para><heading level="2">Parameters: </heading>
</para><para>t : sf::Sprite<linebreak/>
-&gt; new sprite that will be added to the ability.</para><para><heading level="2">Example: </heading>
</para><para>add_sprite_to_action(example_sprite)<linebreak/>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="111" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classability_1adeb10a7af2d372637d56395792ac918f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; sf::Sprite &gt;</type>
        <definition>std::vector&lt; sf::Sprite &gt; ability::get_action</definition>
        <argsstring>()</argsstring>
        <name>get_action</name>
        <briefdescription>
<para>Get list of sprites from an ability. </para>        </briefdescription>
        <detaileddescription>
<para>This method returns a list that contains all sprites from the ability. <linebreak/>
</para><para><heading level="2">Return: </heading>
</para><para>action : std::vector&lt;sf::Sprite&gt;<linebreak/>
-&gt; List of sprites, containing the ability.</para><para><heading level="2">Example: </heading>
</para><para><ref refid="classability_1adeb10a7af2d372637d56395792ac918f" kindref="member">get_action()</ref><linebreak/>
{sprite1,sprite2,sprite3} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="130" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classability_1aed378a7d8a69e8a50347bcc03c0cffb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ability::next_step</definition>
        <argsstring>()</argsstring>
        <name>next_step</name>
        <briefdescription>
<para>Skip to the next action step. </para>        </briefdescription>
        <detaileddescription>
<para>This method moves the current_action_step to the next value. <linebreak/>
</para><para><heading level="2">Example: </heading>
</para><para>current_action_step = 5<linebreak/>
<ref refid="classability_1aed378a7d8a69e8a50347bcc03c0cffb3" kindref="member">next_step()</ref><linebreak/>
current_action_step = 6<linebreak/>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="144" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.cpp" bodystart="37" bodyend="45"/>
        <referencedby refid="classability_1ae34dc7ddb4b0fdb1b00e70ce1860456e" compoundref="ability_8cpp" startline="19" endline="35">move</referencedby>
      </memberdef>
      <memberdef kind="function" id="classability_1a6eedfacfa97cb7195dee8e9c0cccb54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ability::~ability</definition>
        <argsstring>()</argsstring>
        <name>~ability</name>
        <briefdescription>
<para>Decontructor. </para>        </briefdescription>
        <detaileddescription>
<para>Will be called when the object is deleted. <linebreak/>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="151" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.cpp" bodystart="62" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" line="6" column="1" bodyfile="D:/Documents-(D)/HBO-ICT/jaar2/Blok B/git/game_development/Software/Maingame/src/ability.hpp" bodystart="6" bodyend="152"/>
    <listofallmembers>
      <member refid="classability_1a467a2d8bf397119e9856d1cf8d2c58bc" prot="public" virt="non-virtual"><scope>ability</scope><name>ability</name></member>
      <member refid="classability_1aaccb2020f374c640eddfce7f1a669821" prot="private" virt="non-virtual"><scope>ability</scope><name>action</name></member>
      <member refid="classability_1a3c6429af67529f039161a35f70caca6f" prot="public" virt="non-virtual"><scope>ability</scope><name>add_sprite_to_action</name></member>
      <member refid="classability_1a5dbf426e4716c3cc09a8ec0dafb148a0" prot="private" virt="non-virtual"><scope>ability</scope><name>current_action_step</name></member>
      <member refid="classability_1a5cc662aeebc530c01b7bd5ed9328a54e" prot="public" virt="non-virtual"><scope>ability</scope><name>draw</name></member>
      <member refid="classability_1adeb10a7af2d372637d56395792ac918f" prot="public" virt="non-virtual"><scope>ability</scope><name>get_action</name></member>
      <member refid="classability_1a83c4b418a33a2a7f44c3883abfeac4fb" prot="public" virt="non-virtual"><scope>ability</scope><name>get_name</name></member>
      <member refid="classability_1ae34dc7ddb4b0fdb1b00e70ce1860456e" prot="public" virt="non-virtual"><scope>ability</scope><name>move</name></member>
      <member refid="classability_1a0064d2793f684924720a08b059ec2ee0" prot="private" virt="non-virtual"><scope>ability</scope><name>name</name></member>
      <member refid="classability_1aed378a7d8a69e8a50347bcc03c0cffb3" prot="public" virt="non-virtual"><scope>ability</scope><name>next_step</name></member>
      <member refid="classability_1a36d5b1ac8a8a2df0f1790f3ddf320fad" prot="private" virt="non-virtual"><scope>ability</scope><name>position</name></member>
      <member refid="classability_1a6eedfacfa97cb7195dee8e9c0cccb54d" prot="public" virt="non-virtual"><scope>ability</scope><name>~ability</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
