.TH "player" 3 "Fri Feb 3 2017" "Version Version: alpha v1.5" "Git Gud: The adventures of the hungover" \" -*- nroff -*-
.ad l
.nh
.SH NAME
player
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <player\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBplayer\fP (sf::RenderWindow &window, \fBsql\fP &\fBdatabase\fP, std::string save)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "void \fBmove\fP (sf::Vector2f delta)"
.br
.RI "void \fBmove()\fP : Move the player "
.ti -1c
.RI "void \fBset_action\fP (std::string s)"
.br
.RI "void \fBset_action(std::string s)\fP : Set action of the player "
.ti -1c
.RI "void \fBdraw\fP ()"
.br
.RI "void \fBdraw()\fP : Print player "
.ti -1c
.RI "void \fBrespawn\fP ()"
.br
.RI "void \fBrespawn()\fP : Respawn player "
.ti -1c
.RI "int \fBget_interaction\fP (\fBnpc\fP &other_npc)"
.br
.RI "int \fBnpc::get_interaction(npc & other_npc)\fP : Get interaction between the player and a NPC "
.ti -1c
.RI "int \fBget_collision\fP (sf::IntRect colliding_object)"
.br
.RI "int \fBget_collision(sf::IntRect colliding_object)\fP : Get interaction between a NPC and a sf::IntRect object "
.ti -1c
.RI "void \fBset_last_position\fP ()"
.br
.RI "void \fBset_last_position()\fP : Set the position back to its last position "
.ti -1c
.RI "sf::Vector2f \fBget_position\fP ()"
.br
.RI "sf::Vector2f \fBget_position()\fP : Get position of player "
.ti -1c
.RI "std::vector< sf::Sprite > \fBget_action\fP (std::string action_to_get)"
.br
.RI "void show_action(std::string action_to_perform) : Player acion "
.ti -1c
.RI "std::string \fBget_current_action\fP ()"
.br
.RI "Get current action the player\&. "
.ti -1c
.RI "void \fBshow_ability\fP (std::string action_to_show)"
.br
.RI "Perform an action\&. "
.ti -1c
.RI "void \fBset_position\fP (sf::Vector2f new_position)"
.br
.RI "Get position of the player\&. "
.ti -1c
.RI "\fB~player\fP ()"
.br
.RI "Decontructor\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBnpc\fP \fBplayer_npc\fP"
.br
.ti -1c
.RI "std::string \fBplayer_id\fP"
.br
.ti -1c
.RI "sf::Vector2f \fBspawn\fP"
.br
.ti -1c
.RI "sf::Vector2f \fBposition\fP"
.br
.ti -1c
.RI "sf::Vector2f \fBlast_move\fP"
.br
.ti -1c
.RI "\fBsql\fP \fBdatabase\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 7 of file player\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "player::player (sf::RenderWindow & window, \fBsql\fP & database, std::string save)"

.PP
Constructor\&. This method will create an object of class npc\&.
.br
.PP
.SS "Parameters: "
.PP
window : sf::RenderWindow 
.br
-> window where content will be drawn on\&.
.PP
database : sql 
.br
-> referrence to the database class\&.
.br
 save : sf::string 
.br
-> id of the current game save\&.
.PP
.SS "Example: "
.PP
player a(window, database, '1')
.br

.PP
Definition at line 5 of file player\&.cpp\&.
.SS "player::~player ()"

.PP
Decontructor\&. Will be called when the object is deleted\&. 
.br

.PP
Definition at line 72 of file player\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void player::draw ()"

.PP
void \fBdraw()\fP : Print player This method draws the player on the screen\&. 
.br
 
.SS "Example: "
.PP
\fBdraw()\fP
.br
-> Draw the player on the screen 
.PP
Definition at line 28 of file player\&.cpp\&.
.SS "std::vector< sf::Sprite > player::get_action (std::string action_to_get)"

.PP
void show_action(std::string action_to_perform) : Player acion This function displays the right action of the player, so the right spritepart that displays the current action of the player, like walking up
.PP
.SS "Parameters: "
.PP
action_to_perform : std::string 
.br
-> The action that has to be shown
.PP
.SS "Example: "
.PP
show_action('walk_up') 
.br
-> Now the player seems to be walking up 
.PP
Definition at line 59 of file player\&.cpp\&.
.SS "int player::get_collision (sf::IntRect colliding_object)"

.PP
int \fBget_collision(sf::IntRect colliding_object)\fP : Get interaction between a NPC and a sf::IntRect object Call the 'get_collision' function to check for a collision with a sf::IntRect object
.PP
.SS "Parameters: "
.PP
colliding_object : sf::IntRect 
.br
-> The sf::IntRect that will be check for a collision
.PP
.SS "Return: "
.PP
0 / 1 : integer 
.br
-> Return a 1 if there's a collision detected, return a 0 if no collision is detected
.PP
.SS "Example: "
.PP
get_collision(recangle) 
.br
-> return: {'1'}\&. 
.PP
Definition at line 46 of file player\&.cpp\&.
.SS "std::string player::get_current_action ()"

.PP
Get current action the player\&. This function returns the name of the current action of the player\&. 
.br
This is the action that the player is currently performing in the game\&.
.br
.PP
.SS "Return: "
.PP
current_action : std::string 
.br
-> Name of the current action from the player\&.
.PP
.SS "Example: "
.PP
\fBget_current_action()\fP 
.br
-> 'walk_up' 
.PP
Definition at line 55 of file player\&.cpp\&.
.SS "int player::get_interaction (\fBnpc\fP & other_npc)"

.PP
int \fBnpc::get_interaction(npc & other_npc)\fP : Get interaction between the player and a NPC Call the 'get_interaction' function to check for a collision between the player and a NPC
.PP
.SS "Parameters: "
.PP
other_npc : NPC & 
.br
-> The NPC that will be checked with for a collision
.PP
.SS "Return: "
.PP
0 / 1 : integer 
.br
-> Return a 1 if there's a collision detected, return a 0 if no collision is detected
.PP
.SS "Example: "
.PP
get_interaction(*other_npc) 
.br
-> return: {'1'}\&. 
.PP
Definition at line 42 of file player\&.cpp\&.
.SS "sf::Vector2f player::get_position ()"

.PP
sf::Vector2f \fBget_position()\fP : Get position of player When this function is called, it will return the position of the player
.PP
.SS "Return: "
.PP
position : sf::Vector2f 
.br
-> The position of the player
.PP
.SS "Example: "
.PP
\fBget_position()\fP 
.br
-> return sf::Vector(200,200) 
.PP
Definition at line 51 of file player\&.cpp\&.
.SS "void player::move (sf::Vector2f delta)"

.PP
void \fBmove()\fP : Move the player This method moves the position the player\&.
.br
.PP
.SS "Parameters: "
.PP
delta : sf::Vector2f
.br
-> new position of the player\&.
.PP
.SS "Example: "
.PP
move({2,0})
.br
player has moved 2 pixels to the right
.br

.PP
Definition at line 18 of file player\&.cpp\&.
.SS "void player::respawn ()"

.PP
void \fBrespawn()\fP : Respawn player This method moves the player back to a specific location 
.br
 
.SS "Example: "
.PP
\fBrespawn()\fP
.br
-> Player will be moved back to (200,200) 
.PP
Definition at line 37 of file player\&.cpp\&.
.SS "void player::set_action (std::string s)"

.PP
void \fBset_action(std::string s)\fP : Set action of the player This method sets the current action of the player\&.
.br
The standard value is walk down\&.
.br
.PP
.SS "Parameters: "
.PP
s : std::string
.br
-> name of the action that has to be set on active\&.
.PP
.SS "Example: "
.PP
set_action('walk_up')
.br
-> Player is now set for walking up\&.
.br

.PP
Definition at line 24 of file player\&.cpp\&.
.SS "void player::set_last_position ()"

.PP
void \fBset_last_position()\fP : Set the position back to its last position When this function is called, the current location will be set to last location
.PP
.SS "Example: "
.PP
\fBset_last_position()\fP 
.br
 -> The position is now set to the last position 
.PP
Definition at line 32 of file player\&.cpp\&.
.SS "void player::set_position (sf::Vector2f new_position)"

.PP
Get position of the player\&. When this function is called, it will return the position of the player\&.
.br
 
.SS "Return: "
.PP
position : sf::Vector2f 
.br
-> The position of the player
.PP
.SS "Example: "
.PP
\fBget_position()\fP 
.br
-> return sf::Vector(200,200) 
.PP
Definition at line 63 of file player\&.cpp\&.
.SS "void player::show_ability (std::string action_to_show)"

.PP
Perform an action\&. This function shows one step of the asked ability\&. 
.br
This function has to be called in a loop that stops at the max size of the ability list\&. 
.br
.PP
.SS "Parameters: "
.PP
action_to_show : std::string 
.br
-> Name of action\&.
.PP
.SS "Example: "
.PP
show_ability('shoot_arrow_up') 
.br
-> the player will shoot an arrow northwards\&. 
.PP
Definition at line 68 of file player\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBsql\fP player::database\fC [private]\fP"

.PP
Definition at line 14 of file player\&.hpp\&.
.SS "sf::Vector2f player::last_move\fC [private]\fP"

.PP
Definition at line 13 of file player\&.hpp\&.
.SS "std::string player::player_id\fC [private]\fP"

.PP
Definition at line 10 of file player\&.hpp\&.
.SS "\fBnpc\fP player::player_npc\fC [private]\fP"

.PP
Definition at line 9 of file player\&.hpp\&.
.SS "sf::Vector2f player::position\fC [private]\fP"

.PP
Definition at line 12 of file player\&.hpp\&.
.SS "sf::Vector2f player::spawn\fC [private]\fP"

.PP
Definition at line 11 of file player\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Git Gud: The adventures of the hungover from the source code\&.
