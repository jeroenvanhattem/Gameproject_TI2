<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="classaction">
<title>action class Reference</title>
<para>
    <programlisting>#include <link linkend="leveleditor_8hpp">&lt;leveleditor.hpp&gt;</link></programlisting>
</para>
<para>Inheritance diagram for action</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classaction__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for action</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classaction__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::function&lt; bool() &gt; condition</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::function&lt; void() &gt; work</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classaction_1a326b1acaf626d97dbaa9c52f6f3f90e4">action</link> (
std::function&lt; bool() &gt; condition, std::function&lt; void() &gt; work)<para><emphasis>Template function for bool.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classaction_1af9e6424028e398ca05829d3538789840">action</link> (
std::function&lt; void() &gt; work)<para><emphasis>Template function for void.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classaction_1ad39321beff71da26f4aef37916974f11">action</link> (
<link linkend="button__actions_8hpp_1a2e21a2810e34d3df6a08f9ce18ce760d">sf::Keyboard::Key</link> key, std::function&lt; void() &gt; work)<para><emphasis>Template function for key pressing.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classaction_1a55a91caa9803002fa7ddd6e9e9e46dc6">action</link> (
sf::Mouse::Button button, std::function&lt; void() &gt; work)<para><emphasis>Template function for mouse button.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classaction_1a92c003677656b5b3e6e58b19376e6b04">operator()</link> (
)<para><emphasis>Overloader for operator()()</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="classaction_1a326b1acaf626d97dbaa9c52f6f3f90e4">
                <title>action::action (std::function&lt; bool() &gt; condition, std::function&lt; void() &gt; work)</title> <emphasis>Template function for bool.</emphasis>
                
<para>This method will create a boolean function with a specified use. 
<literallayout>
</literallayout>
 </para>

            </section>
            <section xml:id="classaction_1af9e6424028e398ca05829d3538789840">
                <title>action::action (std::function&lt; void() &gt; work)</title> <emphasis>Template function for void.</emphasis>
                
<para>This method will create a void function with a specified use. 
<literallayout>
</literallayout>
 </para>

            </section>
            <section xml:id="classaction_1ad39321beff71da26f4aef37916974f11">
                <title>action::action (sf::Keyboard::Key key, std::function&lt; void() &gt; work)</title> <emphasis>Template function for key pressing.</emphasis>
                
<para>This method will create a boolean function with a specified use. 
<literallayout>
</literallayout>
And returns if a specified key is pressed. 
<literallayout>
</literallayout>
</para>

            </section>
            <section xml:id="classaction_1a55a91caa9803002fa7ddd6e9e9e46dc6">
                <title>action::action (sf::Mouse::Button button, std::function&lt; void() &gt; work)</title> <emphasis>Template function for mouse button.</emphasis>
                
<para>This method will create a boolean function with a specified use. 
<literallayout>
</literallayout>
And returns if a specified mouse button is pressed. 
<literallayout>
</literallayout>
</para>

            </section>
            <section xml:id="classaction_1a92c003677656b5b3e6e58b19376e6b04">
                <title>void action::operator() ()</title> <emphasis>Overloader for operator()()</emphasis>
                
<para>This method creates the <link linkend="classaction_1a92c003677656b5b3e6e58b19376e6b04">operator()()</link> so it can be used in this class. 
<literallayout>
</literallayout>
</para>

            </section>
</section>
