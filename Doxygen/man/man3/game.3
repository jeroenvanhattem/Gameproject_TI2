.TH "game" 3 "Fri Feb 3 2017" "Version Version: alpha v1.5" "Git Gud: The adventures of the hungover" \" -*- nroff -*-
.ad l
.nh
.SH NAME
game
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <game\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBgame\fP (sf::RenderWindow &\fBwindow\fP, \fBsql\fP &\fBdatabase\fP, sf::Vector2f \fBlevelsize\fP)"
.br
.RI "The constructor\&. "
.ti -1c
.RI "void \fBgame_loop\fP ()"
.br
.RI "Loop that handles the game\&. "
.ti -1c
.RI "void \fBget_items_from_database\fP (std::map< std::string, std::vector< std::string >> &item_values_map)"
.br
.RI "Get the items from the database\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "bool \fBmouse_intersects_left_edge\fP (sf::View &view)"
.br
.RI "Checkt left edge of screen\&. "
.ti -1c
.RI "bool \fBmouse_intersects_right_edge\fP (sf::View &view)"
.br
.RI "Checkt right edge of screen\&. "
.ti -1c
.RI "bool \fBmouse_intersects_upper_edge\fP (sf::View &view)"
.br
.RI "Checkt upper edge of screen\&. "
.ti -1c
.RI "bool \fBmouse_intersects_down_edge\fP (sf::View &view)"
.br
.RI "Checkt buttom edge of screen\&. "
.ti -1c
.RI "void \fBgame_viewer\fP ()"
.br
.RI "Activate game_viewr\&. "
.ti -1c
.RI "void \fBdraw_npc\fP ()"
.br
.RI "Draw NPC's on the window\&. "
.ti -1c
.RI "void \fBload_npc\fP ()"
.br
.RI "Get all the NPC's\&. "
.ti -1c
.RI "void \fBview_start_dialogs\fP ()"
.br
.RI "Show beginning dialogues\&. "
.ti -1c
.RI "void \fBdraw_background_store\fP ()"
.br
.RI "Show the store on the window\&. "
.ti -1c
.RI "void \fBmove_player\fP ()"
.br
.RI "Moves the player\&. "
.ti -1c
.RI "void \fBdraw_player\fP ()"
.br
.RI "Draws the player on the screen\&. "
.ti -1c
.RI "void \fBperform_player_action\fP (std::string \fBaction\fP)"
.br
.RI "Show the sprite that belongs to the action\&. "
.ti -1c
.RI "void \fBperform_npc_action\fP (std::string npc_name, std::string \fBaction\fP)"
.br
.RI "Show the sprite that belongs to the action\&. "
.ti -1c
.RI "void \fBplayer_skill\fP ()"
.br
.RI "Show action if action button pressed\&. "
.ti -1c
.RI "void \fBinteract\fP ()"
.br
.RI "Interact with a NPC\&. "
.ti -1c
.RI "void \fBinteract\fP (std::string item_id)"
.br
.RI "Interact with a object or tile\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBplayer\fP \fBarno\fP"
.br
.ti -1c
.RI "\fBdialogbox\fP \fBdialogbox\fP"
.br
.ti -1c
.RI "\fBsql\fP & \fBdatabase\fP"
.br
.ti -1c
.RI "sf::RenderWindow & \fBwindow\fP"
.br
.ti -1c
.RI "sf::View \fBgame_view\fP"
.br
.ti -1c
.RI "sf::View \fBdialogbox_view\fP"
.br
.ti -1c
.RI "\fBinventory\fP \fBinv\fP"
.br
.ti -1c
.RI "sf::Vector2f \fBlevelsize\fP"
.br
.ti -1c
.RI "std::vector< \fBpicture\fP * > \fBbackground_store\fP"
.br
.ti -1c
.RI "std::vector< \fBnpc\fP * > \fBnpc_list\fP"
.br
.ti -1c
.RI "std::vector< sf::IntRect > \fBcollision_objects\fP"
.br
.ti -1c
.RI "std::vector< sf::IntRect > \fBcollision_backgrounds\fP"
.br
.ti -1c
.RI "std::map< std::string, std::vector< std::string > > \fBbackground_values_map\fP"
.br
.ti -1c
.RI "std::map< std::string, std::vector< std::string > > \fBobject_values_map\fP"
.br
.ti -1c
.RI "std::map< std::string, std::vector< std::string > > \fBbegin_stories\fP"
.br
.ti -1c
.RI "bool \fBgame_begin\fP = false"
.br
.ti -1c
.RI "bool \fBfirst_dialog_done\fP = false"
.br
.ti -1c
.RI "int \fBcount\fP = 0"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 17 of file game\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "game::game (sf::RenderWindow & window, \fBsql\fP & database, sf::Vector2f levelsize)"

.PP
The constructor\&. The constructor of the 'game' class, this creates a game object\&.
.br
.PP
.SS "Parameters: "
.PP
levelsize : sf::Vector2f 
.br
-> The size of the level
.PP
database : sql & 
.br
-> A 'SQ' object, this will be used to get information from the database
.PP
window :sf::RenderWindow 
.br
-> The window on which the game has to be drawn
.PP
.SS "Example: "
.PP
\fBgame(window, database, levelsize)\fP 
.br
.IP "\(bu" 2
> This will create a 'game' object 
.PP

.PP
Definition at line 3 of file game\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void game::draw_background_store ()\fC [private]\fP"

.PP
Show the store on the window\&. This function retrieves the background of the store from the vector it's in and displays it on the screen\&.
.br
.PP
.SS "Example: "
.PP
\fBdraw_background_store()\fP 
.br
-> The store will be shown on the window 
.PP
Definition at line 250 of file game\&.cpp\&.
.SS "void game::draw_npc ()\fC [private]\fP"

.PP
Draw NPC's on the window\&. This function will go through a vector which contains NPC objects, their draw function will be called on all of them one by one\&.
.br
.PP
.SS "Example: "
.PP
\fBdraw_npc()\fP 
.br
-> Drawing the NPC's on the window 
.PP
Definition at line 257 of file game\&.cpp\&.
.SS "void game::draw_player ()\fC [private]\fP"

.PP
Draws the player on the screen\&. This function calls the draw function from the 'player' class, which will then draw the player on the screen\&.
.PP
.SS "Example: "
.PP
\fBmove_player()\fP 
.br
-> Player will be shown on the screen 
.PP
Definition at line 323 of file game\&.cpp\&.
.SS "void game::game_loop ()"

.PP
Loop that handles the game\&. This funtion will execute everything that will be needed to run the game, 
.br
like drawing the window, loading the NPC's and working with them
.PP
.SS "Example: "
.PP
\fBgame_loop()\fP 
.br
.IP "\(bu" 2
> This will start the game 
.PP

.PP
Definition at line 52 of file game\&.cpp\&.
.SS "void game::game_viewer ()\fC [private]\fP"

.PP
Activate game_viewr\&. This function is used to activate the game_viewer\&. 
.br
 
.SS "Example: "
.PP
\fBgame_viewer()\fP; 
.PP
Definition at line 98 of file game\&.cpp\&.
.SS "void game::get_items_from_database (std::map< std::string, std::vector< std::string >> & item_values_map)"

.PP
Get the items from the database\&. This function gets all the items from the database and places it in a std::map\&.
.br
.PP
.SS "Parameters: "
.PP
item_values_map : std::map<std::string, std::vector<std::string>> & 
.br
-> The map that contains all the items and its location
.PP
.SS "Example: "
.PP
get_items_from_database(background_values_map) 
.br
.IP "\(bu" 2
> The std::map will be filled with the items 
.PP

.PP
Definition at line 236 of file game\&.cpp\&.
.SS "void game::interact ()\fC [private]\fP"

.PP
Interact with a NPC\&. Call the 'interact' function to see if the player can interact with a player\&.
.br
.PP
.SS "Example: "
.PP
player\&.interact() 
.br
-> Executing the function which will show text on the screen 
.PP
Definition at line 184 of file game\&.cpp\&.
.SS "void game::interact (std::string item_id)\fC [private]\fP"

.PP
Interact with a object or tile\&. Call the 'interact' function to see if the player can interact with a player\&.
.br
.PP
.SS "Parameters: "
.PP
item_name : std::string
.br
-> The name of an item which will be given to the player
.PP
.SS "Example: "
.PP
player\&.interact('banana') 
.br
.IP "\(bu" 2
> Give the player an item and update this in the database 
.PP

.PP
Definition at line 210 of file game\&.cpp\&.
.SS "void game::load_npc ()\fC [private]\fP"

.PP
Get all the NPC's\&. This function will retrieve all the NPC's from the database and put them in the 'npc_list' vector\&.
.br
.PP
.SS "Example: "
.PP
\fBload_npc()\fP 
.br
-> The npc_list vector will be filled with NPC objects from the database 
.PP
Definition at line 263 of file game\&.cpp\&.
.SS "bool game::mouse_intersects_down_edge (sf::View & view)\fC [private]\fP"

.PP
Checkt buttom edge of screen\&. This function checks if the mouse intersects with the down edge of the screen\&.
.br
 
.SS "Parameters: "
.PP
view : sf::View&
.br
-> The view is given with the function\&.
.PP
.SS "Example: "
.PP
mouse_intersects_down_edge(view1); 
.PP
Definition at line 117 of file game\&.cpp\&.
.SS "bool game::mouse_intersects_left_edge (sf::View & view)\fC [private]\fP"

.PP
Checkt left edge of screen\&. This function checks if the mouse intersects with the left edge of the screen\&.
.br
 
.SS "Parameters: "
.PP
view : sf::View&
.br
-> The view is given with the function\&.
.PP
.SS "Example: "
.PP
mouse_intersects_left_edge(view1); 
.PP
Definition at line 105 of file game\&.cpp\&.
.SS "bool game::mouse_intersects_right_edge (sf::View & view)\fC [private]\fP"

.PP
Checkt right edge of screen\&. This function checks if the mouse intersects with the right edge of the screen\&.
.br
 
.SS "Parameters: "
.PP
view : sf::View&
.br
-> The view is given with the function\&.
.PP
.SS "Example: "
.PP
mouse_intersects_right_edge(view1); 
.PP
Definition at line 109 of file game\&.cpp\&.
.SS "bool game::mouse_intersects_upper_edge (sf::View & view)\fC [private]\fP"

.PP
Checkt upper edge of screen\&. This function checks if the mouse intersects with the upper edge of the screen\&.
.br
 
.SS "Parameters: "
.PP
view : sf::View&
.br
-> The view is given with the function\&.
.PP
.SS "Example: "
.PP
mouse_intersects_upper_edge(view1); 
.PP
Definition at line 113 of file game\&.cpp\&.
.SS "void game::move_player ()\fC [private]\fP"

.PP
Moves the player\&. This function will move the player as long as there's no collision\&. 
.br
When there's a collision the player will be set back to its previous position before the collision\&.
.br
.PP
.SS "Example: "
.PP
\fBmove_player()\fP 
.br
-> Move the player 
.PP
Definition at line 294 of file game\&.cpp\&.
.SS "void game::perform_npc_action (std::string npc_name, std::string action)\fC [private]\fP"

.PP
Show the sprite that belongs to the action\&. This function shows the action the belongs to the state of the NPC, if it walks up, the sprite will be shown of the NPC walking up\&.
.br
.PP
.SS "Parameters: "
.PP
action : std::string
.br
-> The name of the action that must be performed\&.
.PP
npc_name : std::string
.br
-> The name of the NPC on which this function must be executed\&.
.PP
.SS "Example: "
.PP
perform_npc_action('henk', 'walk_up') 
.br
.IP "\(bu" 2
> The NPC will be shown doing something, like walking up, walking down or dying 
.PP

.PP
Definition at line 344 of file game\&.cpp\&.
.SS "void game::perform_player_action (std::string action)\fC [private]\fP"

.PP
Show the sprite that belongs to the action\&. This function shows the action the belongs to the state of the player, 
.br
if he walks up, the sprite will be shown of the player walking up\&. 
.br
.PP
.SS "Parameters: "
.PP
action : std::string
.br
-> The name of the action that must be performed
.PP
.SS "Example: "
.PP
perform_player_action('walk_up') 
.br
.IP "\(bu" 2
> The player will be shown doing something, like walking up, walking down or dying 
.PP

.PP
Definition at line 327 of file game\&.cpp\&.
.SS "void game::player_skill ()\fC [private]\fP"

.PP
Show action if action button pressed\&. This method will let the player perform a certain skill if the consisting button is pressed\&. 
.br
The consisting keys and buttons are defined in button_actions\&.
.br

.PP
Definition at line 269 of file game\&.cpp\&.
.SS "void game::view_start_dialogs ()\fC [private]\fP"

.PP
Show beginning dialogues\&. This function shows the the dialogs that will be shown in the beginning of the game\&.
.br
.PP
.SS "Example: "
.PP
\fBview_start_dialogs()\fP 
.br
-> Dialogues will be shown on the bottom of the screen 
.PP
Definition at line 121 of file game\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBplayer\fP game::arno\fC [private]\fP"

.PP
Definition at line 19 of file game\&.hpp\&.
.SS "std::vector<\fBpicture\fP*> game::background_store\fC [private]\fP"

.PP
Definition at line 27 of file game\&.hpp\&.
.SS "std::map<std::string, std::vector<std::string> > game::background_values_map\fC [private]\fP"

.PP
Definition at line 31 of file game\&.hpp\&.
.SS "std::map<std::string, std::vector<std::string> > game::begin_stories\fC [private]\fP"

.PP
Definition at line 33 of file game\&.hpp\&.
.SS "std::vector<sf::IntRect> game::collision_backgrounds\fC [private]\fP"

.PP
Definition at line 30 of file game\&.hpp\&.
.SS "std::vector<sf::IntRect> game::collision_objects\fC [private]\fP"

.PP
Definition at line 29 of file game\&.hpp\&.
.SS "int game::count = 0\fC [private]\fP"

.PP
Definition at line 37 of file game\&.hpp\&.
.SS "\fBsql\fP& game::database\fC [private]\fP"

.PP
Definition at line 21 of file game\&.hpp\&.
.SS "\fBdialogbox\fP game::dialogbox\fC [private]\fP"

.PP
Definition at line 20 of file game\&.hpp\&.
.SS "sf::View game::dialogbox_view\fC [private]\fP"

.PP
Definition at line 24 of file game\&.hpp\&.
.SS "bool game::first_dialog_done = false\fC [private]\fP"

.PP
Definition at line 36 of file game\&.hpp\&.
.SS "bool game::game_begin = false\fC [private]\fP"

.PP
Definition at line 35 of file game\&.hpp\&.
.SS "sf::View game::game_view\fC [private]\fP"

.PP
Definition at line 23 of file game\&.hpp\&.
.SS "\fBinventory\fP game::inv\fC [private]\fP"

.PP
Definition at line 25 of file game\&.hpp\&.
.SS "sf::Vector2f game::levelsize\fC [private]\fP"

.PP
Definition at line 26 of file game\&.hpp\&.
.SS "std::vector<\fBnpc\fP*> game::npc_list\fC [private]\fP"

.PP
Definition at line 28 of file game\&.hpp\&.
.SS "std::map<std::string, std::vector<std::string> > game::object_values_map\fC [private]\fP"

.PP
Definition at line 32 of file game\&.hpp\&.
.SS "sf::RenderWindow& game::window\fC [private]\fP"

.PP
Definition at line 22 of file game\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Git Gud: The adventures of the hungover from the source code\&.
